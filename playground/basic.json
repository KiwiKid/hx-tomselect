{"name":"Welcome!","method":"url","files":[{"location":"./playgrounds/welcome/server.js","filename":"server.js","builtin":true,"contents":"\non.get(\"/\", (request) => {\n\n    return render(request, 'index.html')\n})\n"},{"location":"./playgrounds/welcome/.playground.json","filename":".playground.json","builtin":true,"contents":"{\n    \"name\": \"Welcome!\",\n    \"method\": \"url\",\n    \"files\": [\n        {\n            \"location\": \"./playgrounds/welcome/server.js\",\n            \"filename\": \"server.js\",\n            \"builtin\": true\n        },\n        {\n            \"location\": \"./playgrounds/welcome/.playground.json\",\n            \"filename\": \".playground.json\",\n            \"builtin\": true\n        },\n        {\n            \"location\": \"./playgrounds/.loader.html\",\n            \"filename\": \".loader.html\",\n            \"builtin\": true\n        },\n        {\n            \"location\": \"./playgrounds/welcome/index.html\",\n            \"filename\": \"index.html\"\n        },\n        {\n            \"location\": \"./playgrounds/welcome/button.html\",\n            \"filename\": \"button.html\"\n        }\n    ]\n}"},{"location":"./playgrounds/.loader.html","filename":".loader.html","builtin":true,"contents":"<script src=\"./js/nunjucks.js\"></script>\n<script src=\"./js/pollyjs-core.js\"></script>\n<script src=\"./js/pollyjs-adapter-fetch.js\"></script>\n<script src=\"./js/pollyjs-adapter-xhr.js\"></script>\n<script>\n\n    document.addEventListener('htmx:configRequest', function(evt) {\n        evt.detail.path = window.location.href + evt.detail.path;\n    });\n\n    const fileContents = {};\n    files.forEach(file => fileContents[file.filename] = file.contents);\n\n    function readFile(filename) {\n        return fileContents[filename]\n    }\n\n    let TemplateLoader = {\n        getSource: (name) => ({\n            src: readFile(name),\n            path: name\n        })\n    }\n    var templates = new nunjucks.Environment(TemplateLoader, {\n        autoescape: false\n    })\n\n    function render(request, template, context) {\n        let out = templates.render(template, {...context, request});\n        \n        return new Response(out, {\n            headers: {\n                'content-type': 'text/html'\n            }\n        })\n    }\n\n    const { Polly } = window['@pollyjs/core'];\n\n    Polly.register(window['@pollyjs/adapter-fetch']);\n    Polly.register(window['@pollyjs/adapter-xhr']);\n\n    const polly = new Polly('sandbox-server', {\n        adapters: ['fetch', 'xhr'],\n        mode: \"passthrough\",\n        logging: true,\n    });\n\n    const server = polly.server;\n    \n    const on = {};\n    \n    ['get','put','post','patch','delete','merge','head','options'].forEach((method) => {\n        on[method] = (route, handler) => {\n            \n            let parsedRoute = window.location.href + route.replaceAll(/\\/<([^>]+)>/gm, (_, m) => \"/:\"+m)\n\n            server[method](parsedRoute).intercept(async (req, res) => {\n\n                var requestHeaders = Object.assign({}, req.headers)\n                var request = new Request(req.url, {\n                    body: req.body,\n                    headers: requestHeaders,\n                    method: req.method,\n                })\n\n                var response = await handler(request, ...Object.values(req.params), ...new URL(req.url).searchParams.values())\n\n                if (!response) throw new Error(\"Handler returned no response!\") // Return 404?\n\n                let responseHeaders = {}\n\n                for (const [k,v] of response.headers.entries()) {\n                    res.setHeader(k,v);\n                    responseHeaders[k] = v\n                }\n\n                let text = await response.text()\n\n                \n                res.status(response.status).send(text);\n                \n                window.parent.postMessage({\n                    type: \"network_log\",\n                    request: {\n                        url: req.url.replace(window.location.href, ''),\n                        body: req.body,\n                        method: req.method,\n                        headers: requestHeaders,\n                    },\n                    response: {\n                        headers: responseHeaders,\n                        status: response.status,\n                        body: text,\n                    },\n                }, \"*\")\n            });\n        }\n    })\n    \n    const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n</script>\n<script type=\"module\">\n    ///server.js\n</script>"},{"location":"./playgrounds/welcome/index.html","filename":"index.html","contents":"<html>\n<head>\n    <script src=\"https://unpkg.com/htmx.org@latest\"></script>\n    <link href=\"https://unpkg.com/tom-select@latest/dist/css/tom-select.css\" rel=\"stylesheet\" />\n    <script src=\"https://unpkg.com/tom-select@latest/dist/js/tom-select.complete.min.js\" ></script>\n    <script src=\"https://unpkg.com/hx-tomselect/hx-tomselect.js\" ></script>\n</head>\n    <body style=\"color:white;\">\n    <!--  \n        hx-ext=\"tomselect\"              \n        ts-create=\"true                 \n        ts-create-on-blur=\"true\"        \n        ts-remove-button-title=\"true\"   \n        multiple                        \n    --> \n    <h1>Example hx-tomselect:</h1>\n    <p>Configure TomSelect via simple html attributes:</p>\n        <select\n            hx-ext=\"tomselect\"\n            ts-create=\"true\"\n            ts-create-on-blur=\"true\"\n            ts-remove-button-title=\"true\"\n            multiple\n        >\n            <option value=\"\">Create and/or Select options</option>\n            <option value=\"1\">HTMX</option>\n            <option value=\"2\">IS</option>\n            <option value=\"3\">GREAT</option>\n            <option value=\"4\">AND</option>\n            <option value=\"5\">OFTEN</option>\n            <option value=\"6\">THE</option>\n            <option value=\"7\">BEST</option>\n            <option value=\"8\">SOLUTION</option>\n        </select>\n        \n      <pre>\n&lt;select\n    <span style=\"color:teal;\">hx-ext&#x3D;&quot;tomselect&quot;</span>\n    <span style=\"color:darkorange;\">ts-create&#x3D;&quot;true&quot;</span>\n    <span style=\"color:mediumpurple;\">ts-create-on-blur&#x3D;&quot;true&quot;</span>\n    <span style=\"color:seagreen;\">ts-remove-button-title&#x3D;&quot;true&quot;</span>\n    <span style=\"color:royalblue;\">multiple</span>\n&gt;\n    &lt;option value&#x3D;&quot;&quot;&gt;Create and&#x2F;or Select options&lt;&#x2F;option&gt;\n    &lt;option value&#x3D;&quot;1&quot;&gt;HTMX&lt;&#x2F;option&gt;\n    &lt;option value&#x3D;&quot;2&quot;&gt;IS&lt;&#x2F;option&gt;\n    &lt;option value&#x3D;&quot;3&quot;&gt;GREAT&lt;&#x2F;option&gt;\n    &lt;option value&#x3D;&quot;4&quot;&gt;AND&lt;&#x2F;option&gt;\n    &lt;option value&#x3D;&quot;5&quot;&gt;OFTEN&lt;&#x2F;option&gt;\n    &lt;option value&#x3D;&quot;6&quot;&gt;THE&lt;&#x2F;option&gt;\n    &lt;option value&#x3D;&quot;7&quot;&gt;BEST&lt;&#x2F;option&gt;\n    &lt;option value&#x3D;&quot;8&quot;&gt;SOLUTION&lt;&#x2F;option&gt;\n&lt;&#x2F;select&gt;\n\n<span style=\"color:teal;\">- hx-ext&#x3D;&quot;tomselect&quot; - <span style=\"color:teal;\">activate the extension for this select</span></span><br>\n<span style=\"color:darkorange;\">- ts-create&#x3D;&quot;true&quot; - <span style=\"color:darkorange;\">allow creating new options</span></span><br>\n<span style=\"color:mediumpurple;\">- ts-create-on-blur&#x3D;&quot;true&quot; - <span style=\"color:mediumpurple;\">create when focus is lost</span></span><br>\n<span style=\"color:seagreen;\">- ts-remove-button-title&#x3D;&quot;true&quot; - <span style=\"color:seagreen;\">add delete button (or default text via 'true')</span></span><br>\n<span style=\"color:royalblue;\">- multiple - <span style=\"color:royalblue;\">allow multiple selections</span></span>\n</pre>\n\n    </body>\n</html>"}]}